3. new code question 3
def solve():
    import sys
    data = sys.stdin.read().strip().split('\n')

    # 1) Parse input
    N = int(data[0])
    substrings = []
    for i in range(1, N+1):
        s, c, w = data[i].split()
        substrings.append((s, int(c), int(w)))
    main_string = data[N+1]
    
    # 2) Part 1: Min Cost to Cover Main String
    T = main_string
    m = len(T)
    INF = 10**15
    
    dp = [INF] * (m + 1)
    dp[0] = 0
    parent_index = [-1] * (m + 1)
    parent_sub = [-1] * (m + 1)

    def build_advance_table(sub, T):
        m = len(T)
        adv = [0] * (m + 1)
        for i in range(m + 1):
            p = i
            for c in sub:
                while p < m and T[p] != c:
                    p += 1
                if p < m:
                    p += 1
            adv[i] = p
        return adv

    advance_tables = [build_advance_table(s, T) for s, _, _ in substrings]

    for i in range(m + 1):
        if dp[i] == INF:
            continue
        for j, (s, cost_j, weight_j) in enumerate(substrings):
            nxt = advance_tables[j][i]
            if nxt <= m:
                new_cost = dp[i] + cost_j
                if new_cost < dp[nxt]:
                    dp[nxt] = new_cost
                    parent_index[nxt] = i
                    parent_sub[nxt] = j

    # Backtrack to find chosen substrings
    usage_counts = [0] * N
    cur = m
    while cur > 0:
        p = parent_index[cur]
        j = parent_sub[cur]
        usage_counts[j] += 1
        cur = p

    # 3) Part 2: Maximum Ladder Height
    items = []
    for i, (s, c, w) in enumerate(substrings):
        if usage_counts[i] > 0:
            ability = sum(ord(ch) - ord('a') + 1 for ch in s)
            for _ in range(usage_counts[i]):
                items.append((ability, w))

    if not items:
        print(0)
        return

    items.sort(reverse=True, key=lambda x: x[0])
    M = len(items)
    max_weight = sum(w for _, w in items)

    # 1D DP to store max stack height at given weight
    dp_height = [0] * (max_weight + 1)

    for ability, weight in items:
        for w in range(max_weight, -1, -1):  # Traverse in reverse
            if w <= ability and w + weight <= max_weight:
                dp_height[w + weight] = max(dp_height[w + weight], dp_height[w] + 1)

    print(max(dp_height))
