Road Navigation-----------------------------------------------------------------------
from collections import deque

# Read number of roads
N = int(input().strip())

# Read road definitions
roads = []
for _ in range(N):
    x1, y1, x2, y2 = map(int, input().split())
    roads.append((x1, y1, x2, y2))

# Read starting and destination positions
start_x, start_y = map(int, input().split())
dest_x, dest_y = map(int, input().split())
start = (start_x, start_y)
dest = (dest_x, dest_y)

# Build adjacency list for the road graph
adjacency = {}  # dictionary: point -> list of neighboring points
allowed_points = set()  # set of all points that lie on any road

for (x1, y1, x2, y2) in roads:
    # Normalize coordinates (ensure x1 <= x2 and y1 <= y2 for iteration)
    if x1 == x2:  # vertical road
        x = x1
        y_start, y_end = sorted([y1, y2])
        for y in range(y_start, y_end + 1):
            allowed_points.add((x, y))
        # Add edges between consecutive vertical points
        for y in range(y_start, y_end):
            p1 = (x, y)
            p2 = (x, y + 1)
            # Initialize adjacency entries if not present
            adjacency.setdefault(p1, []).append(p2)
            adjacency.setdefault(p2, []).append(p1)
    elif y1 == y2:  # horizontal road
        y = y1
        x_start, x_end = sorted([x1, x2])
        for x in range(x_start, x_end + 1):
            allowed_points.add((x, y))
        # Add edges between consecutive horizontal points
        for x in range(x_start, x_end):
            p1 = (x, y)
            p2 = (x + 1, y)
            adjacency.setdefault(p1, []).append(p2)
            adjacency.setdefault(p2, []).append(p1)
    # (If a road is a single point x1==x2 and y1==y2, handle below)

# If any road was just a single point, ensure it's in adjacency (as isolated node)
for (x1, y1, x2, y2) in roads:
    if x1 == x2 and y1 == y2:
        p = (x1, y1)
        allowed_points.add(p)
        adjacency.setdefault(p, [])  # no neighbors because it's a single-point road

# Check if start and destination are on the road network
if start not in allowed_points or dest not in allowed_points:
    print("Impossible.")
    exit(0)

# If start equals destination, shortest distance is 0
if start == dest:
    print(0)
    exit(0)

# BFS initialization
queue = deque()
queue.append((start, 0))  # (point, distance)
visited = {start}

result_distance = None

# Perform BFS
while queue:
    current_point, dist = queue.popleft()
    # Check if reached destination
    if current_point == dest:
        result_distance = dist
        break
    # Traverse neighbors
    for neighbor in adjacency.get(current_point, []):
        if neighbor not in visited:
            visited.add(neighbor)
            queue.append((neighbor, dist + 1))

# Output result
if result_distance is not None:
    print(result_distance)
else:
    print("Impossible.")



Arrange MapMarks -----------------------------------------------------------------------------------

def solve_mapmarks():
    import sys
    data = sys.stdin.read().strip().split()
    if not data:
        return  # No input
    # Parse N, M and grid
    it = iter(data)
    N = int(next(it)); M = int(next(it))
    grid_lines = [list(next(it).strip()) for _ in range(N)]
    k = N // M  # number of sub-sheets per row/col

    # Extract sub-sheets and their edge patterns
    sub_sheets = []             # Each sub-sheet as list of rows (each row is a list of chars)
    sub_edges = []              # Each sub-sheet's (top, right, bottom, left) edges as strings
    s_index = d_index = None    # indices of sub-sheet containing S and D
    for i in range(k):
        for j in range(k):
            # Extract sub-sheet (i, j)
            top_row = i * M
            left_col = j * M
            tile = [grid_lines[top_row + x][left_col:left_col + M] for x in range(M)]
            sub_sheets.append(tile)
            # Compute edges as strings for easy comparison
            top_edge    = "".join(tile[0])
            bottom_edge = "".join(tile[M-1])
            left_edge   = "".join(row[0] for row in tile)
            right_edge  = "".join(row[M-1] for row in tile)
            sub_edges.append((top_edge, right_edge, bottom_edge, left_edge))
            # Check for S or D in this tile
            flat = "".join("".join(row) for row in tile)
            idx = len(sub_sheets) - 1
            if 'S' in flat:
                s_index = idx
            if 'D' in flat:
                d_index = idx

    # Prepare placement grid and used marker
    placed = [[None] * k for _ in range(k)]   # will hold indices of sub_sheets in arranged positions
    used = [False] * len(sub_sheets)
    # Fix S and D positions
    if s_index is not None:
        placed[0][0] = s_index
        used[s_index] = True
    if d_index is not None:
        placed[k-1][k-1] = d_index
        used[d_index] = True

    # List of positions to fill (excluding fixed S and D positions)
    positions = []
    for r in range(k):
        for c in range(k):
            if (r == 0 and c == 0 and s_index is not None) or (r == k-1 and c == k-1 and d_index is not None):
                continue
            positions.append((r, c))

    # Backtracking DFS to arrange sub-sheets
    solution_found = False
    def backtrack(pos_idx=0):
        nonlocal solution_found
        if pos_idx == len(positions):
            # All positions filled successfully
            solution_found = True
            return True
        r, c = positions[pos_idx]
        # Determine required edge match patterns from already placed neighbors
        required_top = None
        required_left = None
        if r > 0:
            # Top neighbor is placed
            top_neighbor_idx = placed[r-1][c]
            if top_neighbor_idx is not None:
                # bottom edge of top neighbor must equal top of current
                required_top = sub_edges[top_neighbor_idx][2]  # bottom edge of top neighbor
        if c > 0:
            # Left neighbor is placed
            left_neighbor_idx = placed[r][c-1]
            if left_neighbor_idx is not None:
                # right edge of left neighbor must equal left of current
                required_left = sub_edges[left_neighbor_idx][1]  # right edge of left neighbor
        # If this position is adjacent to the fixed D tile, also consider its edges
        required_right = None
        required_bottom = None
        if r == k-1 and c == k-2 and d_index is not None:
            # directly left of D
            required_right = sub_edges[d_index][3]  # D's left edge
        if r == k-2 and c == k-1 and d_index is not None:
            # directly above D
            required_bottom = sub_edges[d_index][0]  # D's top edge

        # Try all unused tiles for this position
        for tile_idx in range(len(sub_sheets)):
            if used[tile_idx]:
                continue
            # Check if this tile meets the required neighbor edge patterns
            top_edge, right_edge, bottom_edge, left_edge = sub_edges[tile_idx]
            if required_top is not None and top_edge != required_top:
                continue  # top edge doesn't match the piece above
            if required_left is not None and left_edge != required_left:
                continue  # left edge doesn't match the piece to the left
            if required_right is not None and right_edge != required_right:
                continue  # right edge doesn't match the D piece's left
            if required_bottom is not None and bottom_edge != required_bottom:
                continue  # bottom edge doesn't match the D piece's top
            # If all applicable requirements are satisfied, place this tile
            placed[r][c] = tile_idx
            used[tile_idx] = True
            # Recurse to place next tile
            if backtrack(pos_idx + 1):
                return True
            # Backtrack: remove the tile and mark unused
            used[tile_idx] = False
            placed[r][c] = None
        # If no tile fits here, backtrack to previous position
        return False

    backtrack()  # initiate backtracking from the first empty position

    if not solution_found:
        # If for some reason no arrangement found (edge case), output -1 or handle as needed
        # (The puzzle is expected to have a valid solution, so this is a safeguard.)
        print(-1)
        return

    # Reconstruct the solved grid from the arranged sub-sheets
    solved_grid = [[None] * N for _ in range(N)]
    for i in range(k):
        for j in range(k):
            tile_idx = placed[i][j]
            tile = sub_sheets[tile_idx]
            # Copy this tile into the solved_grid at the appropriate location
            base_r, base_c = i * M, j * M
            for x in range(M):
                for y in range(M):
                    solved_grid[base_r + x][base_c + y] = tile[x][y]

    # Locate S and D coordinates in the solved grid
    start = dest = None
    for i in range(N):
        for j in range(N):
            if solved_grid[i][j] == 'S':
                start = (i, j)
            elif solved_grid[i][j] == 'D':
                dest = (i, j)
    if start is None or dest is None:
        # If S or D not found (shouldn't happen if input is correct), handle error
        print(-1)
        return

    # BFS from start to destination on the solved grid
    from collections import deque
    sr, sc = start; dr, dc = dest
    q = deque()
    q.append((sr, sc, 0))
    visited = [[False] * N for _ in range(N)]
    visited[sr][sc] = True
    directions = [(1,0),(-1,0),(0,1),(0,-1)]
    shortest_distance = -1
    while q:
        x, y, dist = q.popleft()
        if (x, y) == (dr, dc):
            shortest_distance = dist
            break
        # Explore neighbors
        for dx, dy in directions:
            nx, ny = x + dx, y + dy
            # Check bounds
            if nx < 0 or nx >= N or ny < 0 or ny >= N:
                continue
            if visited[nx][ny]:
                continue
            cell = solved_grid[nx][ny]
            # Determine if cell is traversable
            if cell == '0':
                # Assuming '0' represents an impassable cell (wall)
                continue
            # Otherwise, it's part of the track (including S or D or path symbol)
            visited[nx][ny] = True
            q.append((nx, ny, dist + 1))
    # Output the shortest path distance
    if shortest_distance != -1:
        print(shortest_distance)
    else:
        # No path found (just in case)
        print(-1)



Optimize Cost--------------------------------------------------------------------------------




string Ladder--------------------------------------------------------------------------------
from functools import lru_cache

def solve_string_laddermarks(main_string, substrings):
    """
    Solve the String LadderMarks problem.
    :param main_string: The target string to form.
    :param substrings: List of tuples (sub_str, cost, weight, ability) for each available substring.
    :return: (min_cost, chosen_substrings, max_height) where:
             min_cost is the minimum total cost to form main_string,
             chosen_substrings is the list of substrings (with their attributes) used in the solution,
             max_height is the maximum stack height from the chosen substrings.
    """
    n = len(substrings)
    m = len(main_string)
    # Precompute next index in main_string after using each substring starting at position i
    next_index = [[0] * (m + 1) for _ in range(n)]
    for p_idx, (p_str, cost, weight, ability) in enumerate(substrings):
        for i in range(m + 1):
            if i == m:
                next_index[p_idx][i] = m  # already at end
            else:
                # simulate matching substring p_str starting from main_string index i
                t = i
                for ch in p_str:
                    if t < m and ch == main_string[t]:
                        t += 1
                    if t == m:  # matched entire remainder of target
                        break
                next_index[p_idx][i] = t
    
    # DP memoization for minimum cost subsequence cover
    @lru_cache(maxsize=None)
    def dp(position, used_mask):
        if position == m:  # reached end of main_string
            return 0
        best = float('inf')
        # Try each unused substring as the next component
        for p_idx, (p_str, cost, weight, ability) in enumerate(substrings):
            if used_mask & (1 << p_idx):
                continue  # skip already used substring
            j = next_index[p_idx][position]
            if j == position:  # this substring doesn't match the next needed char
                continue
            # Cost if we use this substring and then cover the rest
            remaining_cost = dp(j, used_mask | (1 << p_idx))
            if remaining_cost != float('inf'):
                total_cost = cost + remaining_cost
                if total_cost < best:
                    best = total_cost
        return best
    
    min_cost = dp(0, 0)
    
    # Reconstruct chosen substrings sequence for the minimum cost
    chosen_indices = []
    position = 0
    used_mask = 0
    if min_cost == float('inf'):
        # No solution (not expected in valid inputs, but handle gracefully)
        chosen_substrings = []
    else:
        while position < m:
            # Find which substring led to the optimal solution at this state
            for p_idx, (p_str, cost, weight, ability) in enumerate(substrings):
                if used_mask & (1 << p_idx):
                    continue
                j = next_index[p_idx][position]
                if j == position:
                    continue
                # Check if this choice matches the DP optimal cost
                remaining_cost = dp(j, used_mask | (1 << p_idx))
                if remaining_cost != float('inf') and cost + remaining_cost == dp(position, used_mask):
                    chosen_indices.append(p_idx)
                    used_mask |= (1 << p_idx)
                    position = j
                    break
        # Gather the chosen substrings (with their attributes) in the used order
        chosen_substrings = [substrings[idx] for idx in chosen_indices]
    
    # Phase 2: Determine maximum ladder (stack) height from chosen_substrings
    if not chosen_substrings:
        max_height = 0
    else:
        # Sort by ability (asc), then weight (asc)
        chosen_substrings.sort(key=lambda x: (x[3], x[2]))  # (sub_str, cost, weight, ability) -> sort by ability,weight
        k = len(chosen_substrings)
        # dp_height[h] = minimum total weight of a stack of height h
        dp_height = [float('inf')] * (k + 1)
        dp_height[0] = 0  # zero height, zero weight
        max_height = 0
        for (p_str, cost, weight, ability) in chosen_substrings:
            # Try to put this piece at the bottom of a stack of height h (iterate heights high to low)
            for h in range(max_height, -1, -1):
                if dp_height[h] <= ability:
                    # If current piece can support stack of height h (weight dp_height[h]), extend to h+1
                    new_weight = dp_height[h] + weight
                    if new_weight < dp_height[h+1]:
                        dp_height[h+1] = new_weight
                        # Update maximum height seen
                        if h+1 > max_height:
                            max_height = h + 1
        # max_height now holds the tallest possible stack
    return min_cost, chosen_substrings, max_height

# Example usage (assuming input is provided accordingly):
if __name__ == "__main__":
    # Example input (to be replaced with actual input parsing as needed):
    main_string = "TARGETSTRING"
    substrings = [
        # (substring, cost, weight, ability)
        ("TA", 5, 3, 5),
        ("RGETS", 8, 4, 6),
        ("TIN", 6, 2, 0),
        ("STR", 7, 5, 10),
        # ... more substrings ...
    ]
    result_cost, result_substrings, result_height = solve_string_laddermarks(main_string, substrings)
    print("Minimum Cost:", result_cost)
    print("Chosen Substrings (in order):", [s[0] for s in result_substrings])
    print("Maximum Ladder Height:", result_height)


