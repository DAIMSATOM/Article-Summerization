both run time error




Q3
String LadderMarks: 100
Problem Description
Medha, a skilled problem solver with a passion for strings, sets herself a new challenge on this relaxing Sunday. Her challenge has two parts:

Part 1: String Selection (Minimum Cost)

Given N substrings, each with a unique cost and weight, Medha needs to select and concatenate some(or all) of these substrings to create a new string containing the main string as a subsequence. The goal is to achieve this concatenation at the minimum possible total cost.

Part 2: Ladder Construction (Maximum Height)

Using the selected substrings from Part 1, Medha constructs a ladder with the following rules:

Height: Each string added to the ladder increases its height by one unit.
Carrying Ability: Each string has an ability value calculated as the sum of the place values of its characters (e.g., 'a' = 1, 'b' = 2, ..., 'z' = 26). This ability represents its capacity to support strings above it in the ladder.
Weight: The weights of each string is provided as input.
The challenge is to determine the maximum possible height of the ladder that can be built while adhering to these rules: a string's carrying ability must be greater than or equal to the total weight of all strings stacked above it.

Can you help Medha find the optimal solutions for both parts of her challenge?

Constraints
1 <= N <= 25

1 <= length of each substring <= 20

1 <= length of main string <= 100

All the costs will be unique

All the substrings and main string consists of lowercase alphabets only.

Input
First line consists of an integer N denoting the number of substrings.

Next N lines each consists of three space separated values in the format - substring cost weight.

Last line consists of the main string.

Output
Print a single integer denoting the maximum height of the ladder that can be formed.

Time Limit (secs)
1

Examples
Example 1

Input

7

flow 40 30

glow 45 22

show 55 18

throw 60 42

know 50 33

blow 35 12

flat 30 80

wowwhatashow

Output

5

Explanation

For minimising the cost, Medha can select the substrings {blow, blow, blow, show, flat, flat, show} which on concatenating results blowblowblowshowflatflatshow

We can see that the given main string is a subsequence of the concatenated string.

The cost of the above selection is - 3 * 35 (cost of blow) + 2 * 55 (cost of show) + 2 * 30 (cost of flat) = 275 which is the minimum possible cost.

Hence, the selected substrings for the ladder construction are - {blow, blow, blow, show, flat, flat, show}

Construct the ladder in the order - {show, show, blow, blow, blow} from bottom to top, tower goes a height of 5 which is the maximum possible. Hence, print 5.

Note that the solutions given above is one of the possibilities.

Example 2

Input

5

cat 21 15

rat 17 2

dog 4 7

fox 9 9

box 11 12

gotcaroxfaxtax

Output

10

Explanation

For minimising the cost, Medha can select the substrings {dog, dog, rat, cat, rat, fox, fox, rat, fox, rat, rat, fox} which on concatenating results dogdogratcatratfoxfoxratfoxratratfox

We can see that the given main string is a subsequence of the concatenated string.

The cost of the above selection is - 1 * 21 (cost of cat) + 2 * 4 (cost of dog) + 4 * 9 (cost of fox) + 5 * 17 (cost of rat) = 150 which is the minimum possible cost.

Hence, the selected substrings for the ladder construction are - {dog, dog, rat, cat, rat, fox, fox, rat, fox, rat, rat, fox}

Construct the ladder in the order - {fox, fox, fox, rat, rat, rat, rat, rat, dog, dog} from bottom to top, tower gives a height of 10 which is the maximum possible. Hence, print 10.

Note that the solutions given above is one of the possibilities.
